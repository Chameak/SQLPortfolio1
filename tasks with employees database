SELECT 
    *
FROM
    employees
WHERE first_name  LIKE ('Mark%');

SELECT 
    *
FROM
    employees
WHERE
    hire_date LIKE ('%2000%');

SELECT 
    *
FROM
    employees
WHERE
    emp_no LIKE ('1000_');

SELECT 
    *
FROM
    employees
WHERE
    first_name LIKE ('%JACK%');

SELECT 
    *
FROM
    employees
WHERE
    first_name NOT LIKE ('%JACK%');

SELECT 
    *
FROM
    salaries
WHERE
    salary BETWEEN '66000' AND '70000';

SELECT 
    *
FROM
    employees
WHERE
    emp_no NOT BETWEEN '10004' AND '10012';

SELECT 
    *
FROM
    departments
WHERE
    dept_no BETWEEN 'D003' AND 'D006';

SELECT 
    *
FROM
    departments
WHERE
    DEPT_NO IS NOT NULL;

SELECT 
    *
FROM
    employees
WHERE
    gender = 'F'
        AND hire_date >= '2000-01-01';

SELECT 
    *
FROM
    salaries
WHERE
    salary > '150000';

SELECT DISTINCT
    hire_date
FROM
    employees;

SELECT 
    COUNT(salary >= '100000')
FROM
    salaries;

SELECT 
    COUNT(emp_no)
FROM
    dept_manager;

SELECT * FROM employees ORDER BY hire_date DESC;

SELECT salary, COUNT(emp_no) AS emps_with_same_salary
FROM  salaries where salary > '80000'
GROUP BY salary
ORDER BY salary;

SELECT emp_no, MAX(salary) as MaxSalary
FROM salaries
GROUP BY emp_no
HAVING MAX(salary) < 123000;

/*Select the employee numbers of all individuals who have signed more than 1 contract after the 1st of January 2000.*/

SELECT emp_no
FROM dept_emp
WHERE from_date > '2000-01-01'
GROUP BY emp_no
HAVING COUNT(from_date) >1
order by emp_no;

SELECT * FROM salaries;

 SELECT * FROM dept_emp
 LIMIT 100;

SELECT * FROM titles
Limit 10;

INSERT INTO employees
VALUES
(
    999903,
    '1977-09-14',
    'Johnathan',
    'Creek',
    'M',
    '1999-01-01'
);


INSERT INTO titles 
(
emp_no, 
title, 
from_date
)

VALUES (
999903, 
"Senior Engineer",
'1997-10-01'
);

SELECT * FROM titles 
ORDER BY EMP_NO DESC;

INSERT INTO dept_emp 
VALUES
(
999903,
'd005',
'1997-10-01',
'9999-01-01'
); 

CREATE TABLE departments_dup
(
	dept_no CHAR(4) NULL,
    dept_name VARCHAR(40) NULL
);

INSERT INTO departments_dup
SELECT dept_no, dept_name
FROM departments;

INSERT INTO departments
(
	dept_no, dept_name
)
VALUES
(
	'd010', 'Business Analysis'
);

SELECT * FROM departments ORDER BY dept_no;

UPDATE DEPARTMENTS SET dept_name = 'Data Analysis'
WHERE dept_no = 'd010';

 DELETE FROM departments
 WHERE dept_no = 'd010';
 
 SELECT * FROM departments;
 
 SELECT COUNT(dept_no)
FROM departments;

SELECT COUNT(salary)
FROM salaries
WHERE from_date > '1997-01-01';


SELECT MAX(emp_no), MIN(emp_no)
FROM employees;

/*What is the average annual salary paid to employees who started after the 1st of January 1997? ROUNDED FROM 2 DECIMAL PLACES*/

SELECT ROUND(AVG(salary),2)
FROM salaries 
WHERE from_date > '1997-01-01';

SELECT 
    *
FROM
    departments_dup;
    
SELECT 
    dept_no,
    COALESCE(dept_name,
            'department name not provided') AS DEPT_NAME
FROM
    departments_dup;
    
SELECT 
    dept_no,
    dept_name,
    COALESCE(dept_no, dept_name) AS dept_info
FROM
    departments;
    
    
SELECT 
    IFNULL(dept_no, 'N/A'),
    IFNULL(dept_name,
            'Department name not provided'),
    COALESCE(dept_no, dept_name) AS dept_info
FROM
    departments_dup;
    
    CREATE TABLE dept_manager_dup (
    emp_no INT(11) NOT NULL,
    dept_no CHAR(4) NULL,
    from_date DATE NOT NULL,
    to_date DATE NULL
);
INSERT INTO dept_manager_dup

select * from dept_manager;

INSERT INTO dept_manager_dup (emp_no, from_date)

VALUES       
(999904, '2017-01-01'),

(999905, '2017-01-01'),

(999906, '2017-01-01'),

(999907, '2017-01-01');
DELETE FROM dept_manager_dup 
WHERE
    dept_no = 'd001';
    
SELECT 
    m.dept_no, m.emp_no, d.dept_name
FROM
    dept_manager_dup m
	JOIN
    departments_dup d ON m.dept_no = d.dept_no
ORDER BY m.dept_no;
 
 /* e = employees table, m = dept_manager table*/
SELECT 
    m.emp_no, e.first_name, e.last_name, m.dept_no, e.hire_date
FROM
    dept_manager_dup m
	JOIN
    employees e 
    ON m.emp_no = e.emp_no
ORDER BY m.emp_no;

SELECT e.emp_no, e.first_name, e.last_name, dm.dept_no, e.hire_date
FROM employees e,
	 dept_manager_dup dm
WHERE e.emp_no = dm.emp_no;

/*Select the first and last name, the hire date, and the job title of all employees whose first name is “Margareta” and have the last name “Markovitch”.*/ 

SELECT e.first_name, e.last_name, e.hire_date, t.title
FROM employees e
JOIN titles t 
ON e.emp_no = t.emp_no
WHERE e.first_name ='Margareta' AND e.last_name = 'Markovitch'
ORDER BY e.emp_no;

/*Use a CROSS JOIN to return a list with all possible combinations between managers from the dept_manager table and department number 9. */  
 SELECT d.*, m.*
 FROM departments_dup d
 CROSS JOIN dept_manager_dup m
 WHERE d.dept_no = 'd009'
 ORDER BY d.dept_no;
 
 /* Return a list with the first 10 employees with all the departments they can be assigned to.*/
SELECT e.*, d.*
FROM employees e
 CROSS JOIN departments_dup d 
 WHERE e.emp_no < 10011
 ORDER BY e.emp_no, d.dept_name;
 
 /* Select all managers’ first and last name, hire date, job title, start date, and department name.*/
SELECT 
    e.first_name,
    e.last_name,
    e.hire_date,
    t.title,
    t.from_date,
    dm.dept_name
FROM
    employees e
        JOIN
    titles t ON e.emp_no = t.emp_no
        JOIN
    dept_manager_dup d ON e.emp_no = d.emp_no
        JOIN
    departments_dup dm ON d.dept_no = dm.dept_no
    WHERE t.title = 'Manager'
ORDER BY d.dept_no;


/* How many male and how many female managers do we have in the ‘employees’ database?*/
 SELECT
    e.gender, COUNT(dm.emp_no)
FROM
    employees e
        JOIN
    dept_manager dm ON e.emp_no = dm.emp_no
GROUP BY gender;

CREATE TABLE employees_dup(
emp_no INT(11),
birth_date DATE,
first_name VARCHAR(14),
last_name VARCHAR(16),
gender ENUM('M','F'),
hire_date date
);

SELECT
    *
FROM
    (SELECT
        e.emp_no,
            e.first_name,
            e.last_name,
            NULL AS dept_no,
            NULL AS from_date
    FROM
        employees e
    WHERE
        last_name = 'Denis' UNION SELECT
        NULL AS emp_no,
            NULL AS first_name,
            NULL AS last_name,
            dm.dept_no,
            dm.from_date
    FROM
        dept_manager dm) as a
ORDER BY -a.emp_no DESC;

 /*Extract the information about all department managers who were hired between the 1st of January 1990 and the 1st of January 1995. */
SELECT
    *
FROM
    dept_manager
WHERE
    emp_no IN (SELECT
            emp_no
        FROM
            employees
        WHERE
            hire_date BETWEEN '1990-01-01' AND '1995-01-01');
            
/* Select the entire information for all employees whose job title is “Assistant Engineer”. */
SELECT * FROM employees e 
WHERE EXISTS ( SELECT title FROM titles t WHERE t.title = 'Assistant Engineer' AND t.emp_no = e.emp_no);
 
 
 /* Assign employee number 110022 as a manager to all employees 10001-10020, and employee number 110039 as a manager to all employees from 10021-10040. */ 
SELECT 
    A.*
FROM
    (SELECT 
        e.emp_no AS employee_ID,
            MIN(de.dept_no) AS department_code,
            (SELECT 
                    emp_no
                FROM
                    dept_manager
                WHERE
                    emp_no = '110022') AS manager_ID
    FROM
        employees e
    JOIN dept_emp de ON e.emp_no = de.emp_no
    WHERE
        e.emp_no <= 10020
    GROUP BY e.emp_no
    ORDER BY e.emp_no) AS A 
UNION 
 SELECT 
    B.*
FROM
    (SELECT 
        e.emp_no AS employee_ID,
            MIN(de.dept_no) AS department_code,
            (SELECT 
                    emp_no
                FROM
                    dept_manager
                WHERE
                    emp_no = '110039') AS manager_ID
    FROM
        employees e
    JOIN dept_emp de ON e.emp_no = de.emp_no
    WHERE
        e.emp_no > 10020
    GROUP BY e.emp_no
    ORDER BY e.emp_no) AS B
LIMIT 20
;


/*Fill emp_manager with data about employees, the number of the department they are working in, and their managers. */
DROP TABLE IF EXISTS emp_manager;
CREATE TABLE emp_manager 
(
emp_no INT(11) NOT NULL,
dept_no CHAR(4) NULL,
manager_no INT(11) NOT NULL
);

INSERT INTO emp_manager
SELECT U.*
FROM
(
  (SELECT  A.*
FROM
    (SELECT 
        e.emp_no AS employee_ID,
            MIN(de.dept_no) AS department_code,
            (SELECT 
                    emp_no
                FROM
                    dept_manager
                WHERE
                    emp_no = '110022') AS manager_ID
    FROM
        employees e
    JOIN dept_emp de ON e.emp_no = de.emp_no
    WHERE
        e.emp_no <= 10020
    GROUP BY e.emp_no
    ORDER BY e.emp_no) AS A 
UNION 
SELECT 
    B.*
FROM
    (SELECT 
        e.emp_no AS employee_ID,
            MIN(de.dept_no) AS department_code,
            (SELECT 
                    emp_no
                FROM
                    dept_manager
                WHERE
                    emp_no = '110039') AS manager_ID
    FROM
        employees e
    JOIN dept_emp de ON e.emp_no = de.emp_no
    WHERE
        e.emp_no > 10020
    GROUP BY e.emp_no
    ORDER BY e.emp_no) AS B
LIMIT 20)
UNION SELECT C.*
FROM
(SELECT 
        e.emp_no AS employee_ID,
            MIN(de.dept_no) AS department_code,
            (SELECT 
                    emp_no
                FROM
                    dept_manager
                WHERE
                    emp_no = '110022') AS manager_ID
    FROM
        employees e
    JOIN dept_emp de ON e.emp_no = de.emp_no
    WHERE
        de.emp_no = '110039'
    GROUP BY e.emp_no
    ORDER BY e.emp_no) AS C
    UNION SELECT D.*
FROM
(SELECT 
        e.emp_no AS employee_ID,
            MIN(de.dept_no) AS department_code,
            (SELECT 
                    emp_no
                FROM
                    dept_manager
                WHERE
                    emp_no = '110039') AS manager_ID
    FROM
        employees e
    JOIN dept_emp de ON e.emp_no = de.emp_no
    WHERE
        de.emp_no = '110022'
    GROUP BY e.emp_no
    ORDER BY e.emp_no) AS D) AS U;
    
    /* Self-Join example */
    SELECT e1.* FROM emp_manager e1
JOIN emp_manager e2 ON e1.emp_no = e2.manager_no;

  /* Create a view that will extract the average salary of all managers registered in the database. Round this value to the nearest cent. */  
CREATE OR REPLACE VIEW v_avg_salary_managers2 AS 
SELECT ROUND(AVG(salary), 2) as salary
FROM salaries s
JOIN dept_manager dm ON s.emp_no = dm.emp_no;
/* CREATING STORED PROCEDURE*/
DROP PROCEDURE IF EXISTS select_employees;

  DELIMITER $$
  CREATE PROCEDURE select_employees()
  BEGIN
  SELECT * FROM employees
  LIMIT 1000;
  END$$
   DELIMITER ; 
   
   /*  Program that returns information about employees, their salary and contract length*/ 
DELIMITER $$
USE EMPLOYEES $$
CREATE PROCEDURE emp_salary ( IN p_emp_no INTEGER)
BEGIN 
SELECT e.first_name, e.last_name, s.salary, s.from_date, s.to_date
FROM employees e 
JOIN salaries s ON e.emp_no = s.emp_no
WHERE e.emp_no = p_emp_no;
END $$
DELIMITER ;


/*  Program that returns employees name, avgerage salary*/ 
DROP PROCEDURE IF EXISTS emp_avg_salary;
DELIMITER $$
USE EMPLOYEES $$
CREATE PROCEDURE emp_avg_salary ( IN p_emp_no INTEGER)
BEGIN 
SELECT e.first_name, e.last_name, AVG(s.salary)
FROM employees e 
JOIN salaries s ON e.emp_no = s.emp_no
WHERE e.emp_no = p_emp_no
GROUP BY e.first_name, e.last_name;
END $$
DELIMITER ;

/*PROCEDURE FOR AVG SALARY FOR SELECTED EMPLOYEE*/
DROP PROCEDURE IF EXISTS emp_avg_salary;
DELIMITER $$
USE EMPLOYEES $$
CREATE PROCEDURE emp_avg_salary ( IN p_emp_no INTEGER, out p_avg_salary DECIMAL(10,2))
BEGIN 
SELECT AVG(s.salary)
INTO p_avg_salary 
FROM employees e 
JOIN salaries s ON e.emp_no = s.emp_no
WHERE e.emp_no = p_emp_no;
END $$
DELIMITER ;

/*Create a procedure that uses as parameters the first and the last name of an individual, and returns their employee number.*/
DROP PROCEDURE IF EXISTS emp_info;
DELIMITER $$
CREATE PROCEDURE emp_info( IN p_first_name VARCHAR(255), IN p_last_name VARCHAR(255), OUT p_emp_no INT)
BEGIN
SELECT e.emp_no
INTO p_emp_no
FROM employees e 
WHERE e.first_name = p_first_name AND e.last_name = p_last_name;
END $$
DELIMITER ;


/*creating variable for emp_info procedure*/
SET @v_emp_no = 0;
CALL employees.emp_info('Aruna', 'Journel' ,@v_emp_no);
SELECT @v_emp_no;

DROP FUNCTION IF EXISTS f_emp_avg_salary;
/*CREATING FUNTIONS*/
DELIMITER $$
CREATE FUNCTION f_emp_avg_salary (p_emp_no INTEGER) RETURNS DECIMAL (10,2)
DETERMINISTIC
BEGIN
DECLARE v_avg_salary DECIMAL (10,2);

SELECT AVG(s.salary)
INTO v_avg_salary 
FROM employees e
JOIN salaries s ON e.emp_no = s.emp_no
WHERE e.emp_no = p.emp_no;
RETURN v_avg_salary;
END$$
DELIMITER ;

/*Create a function that takes for parameters the first and last name of an employee, and returns the salary from the newest contract of that employee.*/
DROP FUNCTION IF EXISTS emp_info;

DELIMITER $$
CREATE FUNCTION emp_info (p_first_name VARCHAR(255), p_last_name VARCHAR(255)) RETURNS DECIMAL (10,2)
DETERMINISTIC
BEGIN
DECLARE v_salary DECIMAL (10,2); 
DECLARE v_max_from_date DATE;
SELECT
    MAX(from_date)
INTO v_max_from_date FROM
    employees e
        JOIN
    salaries s ON e.emp_no = s.emp_no
WHERE
    e.first_name = p_first_name
        AND e.last_name = p_last_name;
SELECT 
    s.salary
INTO v_salary FROM
    employees e
        JOIN
    salaries s ON e.emp_no = s.emp_no
WHERE
    e.first_name = p_first_name
        AND s.from_date = v_max_from_date
        AND e.last_name = p_last_name;
RETURN v_salary;
END $$

DELIMITER ;

COMMIT;

DELIMITER $$

CREATE TRIGGER before_salaries_insert
BEFORE INSERT ON salaries
FOR EACH ROW
BEGIN 
	IF NEW.salary < 0 THEN 
		SET NEW.salary = 0; 
	END IF; 
END $$
 
DELIMITER ;

SELECT * FROM salaries
WHERE emp_no ='10001';

DELIMITER $$

CREATE TRIGGER trig_upd_salary
BEFORE UPDATE ON salaries
FOR EACH ROW
BEGIN 
	IF NEW.salary < 0 THEN 
		SET NEW.salary = OLD.salary; 
	END IF; 
END $$

DELIMITER ;

UPDATE salaries 
SET 
    salary = -50000
WHERE
    emp_no = '10001'
        AND from_date = '2010-06-22';
        
     SELECT * FROM salaries
     where emp_no ='10001'
     and from_date = '2010-06-22';
     
     DELIMITER $$
/* dept_manager trigger*/
CREATE TRIGGER trig_ins_dept_mng
AFTER INSERT ON dept_manager
FOR EACH ROW
BEGIN
	DECLARE v_curr_salary int;
    
    SELECT 
		MAX(salary)
	INTO v_curr_salary FROM
		salaries
	WHERE
		emp_no = NEW.emp_no;

	IF v_curr_salary IS NOT NULL THEN
		UPDATE salaries 
		SET 
			to_date = SYSDATE()
		WHERE
			emp_no = NEW.emp_no and to_date = NEW.to_date;

		INSERT INTO salaries 
			VALUES (NEW.emp_no, v_curr_salary + 20000, NEW.from_date, NEW.to_date);
    END IF;
END $$

DELIMITER ;

INSERT INTO dept_manager VALUES ('111534', 'd009', date_format(sysdate(), '%y-%m-%d'), '9999-01-01');

     SELECT * FROM salaries WHERE emp_no = 111534;

ROLLBACK;

/*Create a trigger that checks if the hire date of an employee is higher than the current date. If true, set this date to be the current date. Format the output appropriately (YY-MM-DD).*/
DELIMITER $$
CREATE TRIGGER trig_hire_date
BEFORE INSERT ON employees
FOR EACH ROW
	BEGIN
    IF NEW.hire_date > DATE_FORMAT(SYSDATE(), '%y-%m-%d') THEN
    SET NEW.hire_date = DATE_FORMAT(SYSDATE(),'%Y-%M-%D');
    END IF;
    END $$
   DELIMITER ; 
    
    INSERT employees VALUES ('999905', '1970-01-31', 'John', 'Johnson', 'M', '2025-01-01');  
    
    SELECT * FROM employees 
    ORDER BY emp_no DESC;
    
    /*creating indexes*/
SELECT * FROM employees WHERE hire_date > '2000-01-01';
    
CREATE INDEX i_hire_date ON employees(hire_date);

SELECT * FROM employees WHERE first_name = 'GEORGI' AND last_name = 'FACELLO';

CREATE INDEX i_emp_name ON employees(first_name, last_name);

/*CASE statement */
SELECT emp_no, first_name, last_name,
CASE 
WHEN gender = 'M' THEN 'Male'
ELSE 'Female'
END AS gender
FROM employees;
/* obtain a result set containing the employee number, first name, and last name of all employees with a number higher than 109990. Create a fourth column in the query, 
indicating whether this employee is also a manager, according to the data provided in the dept_manager table, or a regular employee. */
SELECT e.emp_no, first_name, last_name,
CASE
WHEN dm.emp_no IS NOT NULL THEN 'MANAGER'
ELSE 'EMPLOYEE'
END AS is_manager
FROM employees e 
LEFT JOIN dept_manager dm ON dm.emp_no = e.emp_no
WHERE e.emp_no > 109990;

/*Extract a dataset containing the following information about the managers: employee number, first name, and last name. Add two columns at the end – 
one showing the difference between the maximum and minimum salary of that employee, and another one saying whether this salary raise was higher than $30,000 or NOT.*/
SELECT e.first_name, e.last_name, dm.emp_no, MAX(s.salary) - MIN(s.salary) AS salary_diff,
CASE
WHEN MAX(s.salary) - MIN(s.salary) > 30000 THEN 'raise was more'
ELSE 'raise was less'
END AS salary_increase
FROM employees e 
JOIN dept_manager dm ON e.emp_no = dm.emp_no
JOIN salaries s ON e.emp_no = s.emp_no
GROUP BY s.emp_no;

/*Extract the employee number, first name, and last name of the first 100 employees, and add a fourth column, 
called “current_employee” saying “Is still employed” if the employee is still working in the company, or “Not an employee anymore” if they aren’t.*/
SELECT e.emp_no, e.first_name, e.last_name,
CASE
WHEN MAX(de.to_date) < SYSDATE() THEN 'no longer an employee'
ELSE 'is still employed'
END AS current_employee
FROM employees e 
JOIN dept_emp de ON e.emp_no = de.emp_no
GROUP BY de.emp_no
LIMIT 100
;

/*Window Functions*/

SELECT emp_no, dept_no, ROW_NUMBER() OVER(ORDER BY emp_no asc) AS row_num
FROM dept_manager;

SELECT emp_no, first_name, last_name, 
row_number() OVER(PARTITION BY first_name ORDER BY last_name ASC) AS row_num
FROM employees;

SELECT s.salary, dm.emp_no,
ROW_NUMBER() OVER(ORDER BY salary ASC) AS row_num1,
ROW_NUMBER() OVER(PARTITION BY dm.emp_no ORDER BY s.salary DESC) AS row_num2
FROM salaries s
JOIN dept_manager dm ON s.emp_no = dm.emp_no;

SELECT s.salary, dm.emp_no,
ROW_NUMBER() OVER() AS row_num1,
ROW_NUMBER() OVER(PARTITION BY dm.emp_no ORDER BY s.salary DESC) AS row_num2
FROM salaries s
JOIN dept_manager dm ON s.emp_no = dm.emp_no
ORDER BY row_num1, emp_no, salary ASC;

SELECT 
emp_no, salary,
ROW_NUMBER() OVER w AS row_num1
FROM salaries
WINDOW w AS (partition by emp_no ORDER BY salary DESC);

SELECT emp_no, first_name, last_name,
ROW_NUMBER() OVER w AS row_num1
FROM employees
WINDOW w AS (PARTITION BY first_name ORDER BY emp_no ASC);

# Write a query containing a window function to obtain all salary values that employee number 10560 has ever signed a contract for.
# Order and display the obtained salary values from highest to lowest.

SELECT emp_no, salary,
ROW_NUMBER() OVER w AS row_num
FROM salaries
WHERE emp_no = 10560
WINDOW w AS (PARTITION BY emp_no ORDER BY salary DESC);

/*Write a query that upon execution, 
displays the number of salary contracts that each manager has ever signed while working in the company.*/

SELECT dm.emp_no, (COUNT(salary)) AS no_of_salary_contracts,
ROW_NUMBER() OVER() AS row_num
FROM salaries s 
JOIN dept_manager dm ON s.emp_no = dm.emp_no
GROUP BY emp_no
ORDER BY emp_no
;

/*Write a query that upon execution retrieves a result set containing all salary values that employee 10560 has ever signed a contract for. 
Use a window function to rank all salary values from highest to lowest in a way that equal salary values bear the same rank and that gaps in the obtained ranks for 
subsequent rows are allowed.*/

SELECT emp_no, salary,
RANK() OVER w AS rank_num
FROM salaries
WHERE emp_no = 10560
WINDOW w AS (PARTITION BY emp_no ORDER BY salary DESC)
;
/*Write a query that upon execution retrieves a result set containing all salary values that employee 10560 has ever signed a contract for. 
Use a window function to rank all salary values from highest to lowest in a way that equal salary values bear the same rank and that gaps in the obtained ranks for 
subsequent rows are not allowed.*/

SELECT emp_no, salary,
DENSE_RANK() OVER w AS rank_num
FROM salaries
WHERE emp_no = 10560
WINDOW w AS (PARTITION BY emp_no ORDER BY salary DESC)
;


# WINDOW FUNCTIONS WITH JOINS
SELECT
d.dept_no,
d.dept_name,
dm.emp_no,
RANK() OVER w AS department_salary_rank,
s.salary,
s.from_date AS salary_from_date,
s.to_date AS salary_to_date,
dm.from_date AS dept_manager_from_date,
dm.to_date AS dept_manager_to_date
FROM dept_manager dm
JOIN
salaries s ON s.emp_no = dm.emp_no
AND s.from_date BETWEEN dm.from_date AND dm.to_date
AND s.to_date BETWEEN dm.from_date AND dm.to_date
JOIN
departments d ON dm.dept_no = d.dept_no
WINDOW w AS(PARTITION BY dm.dept_no ORDER BY s.salary DESC);

/*Write a query that ranks the salary values in descending order of all contracts signed by employees numbered between 10500 and 10600 inclusive.
 Let equal salary values for one and the same employee bear the same rank. Also, allow gaps in the ranks obtained for their subsequent rows.*/
 
SELECT e.emp_no, s.salary,
RANK() OVER w AS salary_rank
FROM employees e 
JOIN salaries s ON e.emp_no = s.emp_no
WHERE e.emp_no BETWEEN 10500 AND  10600
WINDOW w AS(PARTITION BY emp_no ORDER BY salary DESC);

#Write a query that ranks the salary values in descending order of the following contracts from the "employees" database:
#- contracts that have been signed by employees numbered between 10500 and 10600 inclusive.
#- contracts that have been signed at least 4 full-years after the date when the given employee was hired in the company for the first time.
#In addition, let equal salary values of a certain employee bear the same rank. Do not allow gaps in the ranks obtained for their subsequent rows.

SELECT e.emp_no, s.salary, e.hire_date,
s.from_date,
DENSE_RANK() OVER w AS salary_rank,
(YEAR(s.from_date) - YEAR(e.hire_date)) AS years_from_start
FROM employees e 
JOIN salaries s ON e.emp_no = s.emp_no
AND YEAR(s.from_date) - YEAR(e.hire_date) >=5
WHERE e.emp_no BETWEEN 10500 AND  10600
WINDOW w AS(PARTITION BY emp_no ORDER BY salary DESC);


/*Write a query that can extract the following information from the "employees" database:
- the salary values (in ascending order) of the contracts signed by all employees numbered between 10500 and 10600 inclusive
- a column showing the previous salary from the given ordered list
- a column showing the subsequent salary from the given ordered list
- a column displaying the difference between the current salary of a certain employee and their previous salary
- a column displaying the difference between the next salary of a certain employee and their current salary
Limit the output to salary values higher than $80,000 only.
Also, to obtain a meaningful result, partition the data by employee number.*/

SELECT emp_no, salary,
LAG(salary) OVER w AS previous_salary,
LEAD(salary) OVER w AS next_salary,
 salary - LAG(salary) OVER w AS diff_salary_current_previous,
 LAG(salary) OVER w - salary AS diff_salary_next_current
 FROM salaries
WHERE emp_no = 10001
WINDOW w AS (ORDER BY salary) 
;

SELECT emp_no, salary,
LAG(salary) OVER w AS previous_salary,
LEAD(salary) OVER w AS next_salary,
salary - LAG(salary) OVER w AS diff_salary_current_previous,
 LAG(salary) OVER w - salary AS diff_salary_next_current
 FROM salaries 
 WHERE emp_no BETWEEN 10500 AND 10600
 AND salary > 80000
 WINDOW w AS (PARTITION BY emp_no ORDER BY salary);
 
 /*create a query whose result set contains data arranged by the salary values associated to each employee number (in ascending order). 
 Let the output contain the following six columns:
- the employee number
- the salary value of an employee's contract (i.e. which we’ll consider as the employee's current salary)
- the employee's previous salary
- the employee's contract salary value preceding their previous salary
- the employee's next salary
- the employee's contract salary value subsequent to their next salary
Restrict the output to the first 1000 records you can obtain.*/
 
 SELECT emp_no, salary,
 LAG(salary) OVER w AS previous_salary,
 LAG(salary,2) OVER w AS last_last_salary,
 LEAD(salary) OVER w AS next_salary,
 LEAD(salary,2) OVER w AS next_next_salary
 FROM salaries
 WINDOW w AS (PARTITION BY emp_no ORDER BY salary)
 LIMIT 1000;
 
 #Create a query that upon execution returns a result set containing the employee numbers, 
#contract salary values, start, and end dates of the first ever contracts that each employee signed for the company.
SELECT 
    s1.emp_no, s.salary, s.from_date, s.to_date
FROM
    salaries s
        JOIN
    (SELECT 
        emp_no, MIN(from_date) as from_date
    FROM
        salaries
    GROUP BY emp_no) s1 ON s.emp_no = s1.emp_no
WHERE
    s.from_date = s1.from_date;
    
    /*Consider the employees' contracts that have been signed after the 1st of January 2000 and terminated before the 1st of January 2002 (as registered in the "dept_emp" table).
Create a MySQL query that will extract the following information about these employees:
- Their employee number
- The salary values of the latest contracts they have signed during the suggested time period
- The department they have been working in (as specified in the latest contract they've signed during the suggested time period)
- Use a window function to create a fourth field containing the average salary paid in the department the employee was last working in during the suggested time period. 
Name that field "average_salary_per_department".*/

SELECT de2.emp_no, d.dept_name, s2.salary, AVG(salary) OVER w AS averge_salary_per_department
FROM
(SELECT de.emp_no, de.dept_no, de.from_date, de.to_date FROM 
dept_emp de
JOIN
(SELECT 
    emp_no, MAX(from_date) AS from_date
FROM
    dept_emp 
GROUP BY emp_no) de1 ON de.emp_no = de1.emp_no
WHERE
    de.to_date <'2002-01-01'
    AND de.from_date > '2000-01-01'
    AND de.from_date = de1.from_date) de2
    JOIN
    (SELECT s1.emp_no, s.salary, s.from_date, s.to_date FROM 
salaries s 
JOIN
(SELECT 
    emp_no, MAX(from_date) AS from_date
FROM
    salaries 
GROUP BY emp_no) s1 ON s.emp_no = s1.emp_no
WHERE
    s.to_date <'2002-01-01'
    AND s.from_date > '2000-01-01'
    AND s.from_date = s1.from_date) s2 ON s2.emp_no = de2.emp_no
    JOIN departments d ON d.dept_no = de2.dept_no
GROUP BY de2.emp_no, d.dept_name
WINDOW w AS(PARTITION BY de2.dept_no)
ORDER BY de2.emp_no
;  

/*Use a CTE (a Common Table Expression) and a SUM() function in the SELECT statement in a query to find out how many male employees 
have never signed a contract with a salary value higher than or equal to the all-time company salary average.*/

WITH cte AS(SELECT avg(salary) as avg_salary from salaries)
SELECT SUM(CASE WHEN s.salary <= c.avg_salary THEN 1 ELSE 0 END) AS no_m_salaries_below_avg,
COUNT(s.salary) AS total_no_of_salary_contracts
FROM 
salaries s 
Join employees e ON s.emp_no = e.emp_no AND e.gender = 'M'
JOIN 
cte c;

/*Use a cross join in a query to find out how many male 
employees have never signed a contract with a salary value higher than or equal to the all-time company salary average */

WITH cte AS(SELECT avg(salary) as avg_salary from salaries)
SELECT SUM(CASE WHEN s.salary <= c.avg_salary THEN 1 ELSE 0 END) AS no_m_salaries_below_avg,
COUNT(s.salary) AS total_no_of_salary_contracts
FROM 
salaries s 
Join employees e ON s.emp_no = e.emp_no AND e.gender = 'M'
CROSS JOIN 
cte c;

/*Use two common table expressions and a 
SUM() function in the SELECT statement of a query to obtain the number of male employees whose 
highest salaries have been below the all-time average.*/

WITH cte_avg_salary AS(
SELECT 
    AVG(salary) AS avg_salary
FROM
    salaries),
    cte_m_highest_salary AS (
    SELECT 
    s.emp_no, MAX(s.salary) AS m_highest_salary
FROM
    salaries s
        JOIN
    employees e ON e.emp_no = s.emp_no AND e.gender = 'M'
GROUP BY emp_no)
SELECT 
    SUM(CASE
        WHEN c2.m_highest_salary  < c1.avg_salary THEN 1 ELSE 0 END) AS m_highest_salaries_above_average,
    COUNT(e.emp_no) As total_contracts_m
FROM
    employees e
        JOIN
    cte_m_highest_salary c2 ON c2.emp_no = e.emp_no
        CROSS JOIN
    cte_avg_salary c1;
    
/*Use two common table expressions and a 
COUNT() function in the SELECT statement of a query to obtain 
the number of male employees whose highest salaries have been below the all-time average*/

    WITH cte_avg_salary AS(
SELECT 
    AVG(salary) AS avg_salary
FROM
    salaries),
    cte_m_highest_salary AS (
    SELECT 
    s.emp_no, MAX(s.salary) AS m_highest_salary
FROM
    salaries s
        JOIN
    employees e ON e.emp_no = s.emp_no AND e.gender = 'M'
GROUP BY emp_no)
SELECT 
    COUNT(CASE
        WHEN c2.m_highest_salary  < c1.avg_salary THEN c2.m_highest_salary ELSE NULL END) AS m_highest_salaries_above_average,
    COUNT(e.emp_no) As total_contracts_m
FROM
    employees e
        JOIN
    cte_m_highest_salary c2 ON c2.emp_no = e.emp_no
        CROSS JOIN
    cte_avg_salary c1;
    
    #OBTAINING THE SAME RESULT WITH A JOIN
    
    WITH cte_avg_salary AS (
SELECT AVG(salary) AS avg_salary FROM salaries
),
cte_m_highest_salary AS (
SELECT s.emp_no, MAX(s.salary) AS max_salary
FROM salaries s JOIN employees e ON e.emp_no = s.emp_no AND e.gender = 'M'
GROUP BY s.emp_no
)
SELECT
COUNT(CASE WHEN c2.max_salary < c1.avg_salary THEN c2.max_salary ELSE NULL END) AS max_salary
FROM cte_m_highest_salary c2
JOIN cte_avg_salary c1;
    
WITH emp_hired_from_jan_2000 AS (
SELECT * FROM employees WHERE hire_date > '2000-01-01'),
highest_salary_values AS (
SELECT e.emp_no, MAX(s.salary) FROM salaries s JOIN emp_hired_from_jan_2000 e ON s.emp_no = e.emp_no GROUP BY e.emp_no)
SELECT * FROM highest_salary_values;

# temporary tables
CREATE TEMPORARY TABLE male_max_salaries
SELECT 
    s.emp_no, MAX(salary) AS m_max_salaries
FROM
    salaries s
        JOIN
    employees e ON e.emp_no = s.emp_no AND e.gender = 'M'
GROUP BY s.emp_no;

SELECT * from male_max_salaries;

/*Create a temporary table called dates containing the following three columns:
- one displaying the current date and time,
- another one displaying two months earlier than the current date and time, and a
- third column displaying two years later than the current date and time.*/

create temporary table dates
SELECT NOW() AS current_date_and_time,
DATE_SUB(NOW(), INTERVAL 2 MONTH) AS two_month_earlier,
DATE_SUB(NOW(), INTERVAL -2 YEAR) AS two_yearS_later;


/*Create a query joining the result sets from the dates temporary table you created during the previous lecture with a new 
Common Table Expression (CTE) containing the same columns. 
Let all columns in the result set appear on the same row.*/

WITH cte AS (SELECT NOW() AS current_date_and_time,
DATE_SUB(NOW(), INTERVAL 2 MONTH) AS two_months_earlier,
DATE_SUB(NOW(), INTERVAL -2 YEAR) AS two_years_later)
SELECT * FROM DATES d1 JOIN cte c;

/*Again, create a query joining the result sets from the dates temporary table you created during the previous 
lecture with a new Common Table Expression (CTE) containing the same columns. This time, combine the two sets vertically.*/

WITH cte AS (SELECT NOW() AS current_date_and_time,
DATE_SUB(NOW(), INTERVAL 2 MONTH) AS two_months_earlier,
DATE_SUB(NOW(), INTERVAL -2 YEAR) AS two_years_later)
SELECT * FROM DATES UNION ALL SELECT * FROM cte ;

 
   

 
